{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Jocalu/Desktop/CRUD-react-native/screens/CreateUser/CreateUserScreen.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { TouchableHighlight } from 'react-native-gesture-handler';\nimport firebase from \"../../database/firebase\";\nexport default function CreateUserScreen(props) {\n  var _useState = useState({\n    name: '',\n    email: '',\n    phone: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 35\n    },\n    buttonSave: {\n      backgroundColor: 'blue',\n      padding: 10,\n      alignItems: 'center'\n    },\n    textWhite: {\n      color: 'white',\n      fontSize: 20\n    },\n    textBlack: {\n      color: 'black',\n      fontSize: 20\n    },\n    inputGroup: {\n      flex: 1,\n      padding: 0,\n      marginBottom: 15,\n      borderBottomColor: '#cccccc',\n      borderBottomWidth: 1\n    }\n  });\n\n  var handleChangeText = function handleChangeText(name, value) {\n    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, name, value)));\n  };\n\n  var saveNewUser = function saveNewUser() {\n    return _regeneratorRuntime.async(function saveNewUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(state.name === '')) {\n              _context.next = 4;\n              break;\n            }\n\n            Alert.alert('Please provide a name');\n            _context.next = 13;\n            break;\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(firebase.db.collection('users').add({\n              name: state.name,\n              email: state.email,\n              phone: state.phone\n            }));\n\n          case 7:\n            props.navigation.navigate('UsersList');\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](4);\n            Alert.alert('Error');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[4, 10]], Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.inputGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Name User\",\n    onChangeText: function onChangeText(value) {\n      return handleChangeText('name', value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Email User\",\n    onChangeText: function onChangeText(value) {\n      return handleChangeText('email', value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.inputGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Phone User\",\n    onChangeText: function onChangeText(value) {\n      return handleChangeText('phone', value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableHighlight, {\n    style: styles.buttonSave,\n    onPress: function onPress() {\n      return saveNewUser();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.textWhite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Save User\"))));\n}\nCreateUserScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/Jocalu/Desktop/CRUD-react-native/screens/CreateUser/CreateUserScreen.jsx"],"names":["React","useState","PropTypes","TouchableHighlight","firebase","CreateUserScreen","props","name","email","phone","state","setState","styles","StyleSheet","create","container","flex","padding","buttonSave","backgroundColor","alignItems","textWhite","color","fontSize","textBlack","inputGroup","marginBottom","borderBottomColor","borderBottomWidth","handleChangeText","value","saveNewUser","Alert","alert","db","collection","add","navigation","navigate","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  TextInput,\n  ScrollView,\n  Alert,\n  StyleSheet,\n  Text,\n} from 'react-native';\nimport { TouchableHighlight } from 'react-native-gesture-handler';\nimport firebase from '../../database/firebase';\n\nexport default function CreateUserScreen(props) {\n  const [state, setState] = useState({\n    name: '',\n    email: '',\n    phone: '',\n  });\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 35,\n    },\n    buttonSave: {\n      backgroundColor: 'blue',\n      padding: 10,\n      alignItems: 'center',\n    },\n    textWhite: {\n      color: 'white',\n      fontSize: 20,\n    },\n    textBlack: {\n      color: 'black',\n      fontSize: 20,\n    },\n    inputGroup: {\n      flex: 1,\n      padding: 0,\n      marginBottom: 15,\n      borderBottomColor: '#cccccc',\n      borderBottomWidth: 1,\n    },\n  });\n\n  const handleChangeText = (name, value) => {\n    setState({ ...state, [name]: value });\n  };\n\n  const saveNewUser = async () => {\n    if (state.name === '') {\n      Alert.alert('Please provide a name');\n    } else {\n      try {\n        await firebase.db.collection('users').add({\n          name: state.name,\n          email: state.email,\n          phone: state.phone,\n        });\n        props.navigation.navigate('UsersList');\n      } catch (error) {\n        Alert.alert('Error');\n      }\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.inputGroup}>\n        <TextInput\n          placeholder=\"Name User\"\n          onChangeText={(value) => handleChangeText('name', value)}\n        />\n      </View>\n\n      <View style={styles.inputGroup}>\n        <TextInput\n          placeholder=\"Email User\"\n          onChangeText={(value) => handleChangeText('email', value)}\n        />\n      </View>\n\n      <View style={styles.inputGroup}>\n        <TextInput\n          placeholder=\"Phone User\"\n          onChangeText={(value) => handleChangeText('phone', value)}\n        />\n      </View>\n\n      <View>\n        <TouchableHighlight\n          style={styles.buttonSave}\n          onPress={() => saveNewUser()}\n        >\n          <Text style={styles.textWhite}>Save User</Text>\n        </TouchableHighlight>\n      </View>\n\n    </ScrollView>\n  );\n}\n\nCreateUserScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}